//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;



namespace cfg.block
{

public sealed partial class Block :  Bright.Config.BeanBase 
{
    public Block(JSONNode _json) 
    {
        { if(!_json["Id"].IsNumber) { throw new SerializationException(); }  Id = _json["Id"]; }
        { if(!_json["Name"].IsString) { throw new SerializationException(); }  Name = _json["Name"]; }
        { var _json2 = _json["GreennessRange"]; if(!_json2.IsObject) { throw new SerializationException(); }  float __x; { if(!_json2["x"].IsNumber) { throw new SerializationException(); }  __x = _json2["x"]; } float __y; { if(!_json2["y"].IsNumber) { throw new SerializationException(); }  __y = _json2["y"]; } GreennessRange = new UnityEngine.Vector2(__x, __y); }
        { var _json1 = _json["ConversionRate"]; if(!_json1.IsArray) { throw new SerializationException(); } int _n = _json1.Count; ConversionRate = new float[_n]; int _index=0; foreach(JSONNode __e in _json1.Children) { float __v;  { if(!__e.IsNumber) { throw new SerializationException(); }  __v = __e; }  ConversionRate[_index++] = __v; }   }
        PostInit();
    }

    public Block(int Id, string Name, UnityEngine.Vector2 GreennessRange, float[] ConversionRate ) 
    {
        this.Id = Id;
        this.Name = Name;
        this.GreennessRange = GreennessRange;
        this.ConversionRate = ConversionRate;
        PostInit();
    }

    public static Block DeserializeBlock(JSONNode _json)
    {
        return new block.Block(_json);
    }

    /// <summary>
    /// 编号
    /// </summary>
    public int Id { get; private set; }
    /// <summary>
    /// 地块名称
    /// </summary>
    public string Name { get; private set; }
    /// <summary>
    /// 绿化度范围
    /// </summary>
    public UnityEngine.Vector2 GreennessRange { get; private set; }
    /// <summary>
    /// 地块转化率
    /// </summary>
    public float[] ConversionRate { get; private set; }

    public const int __ID__ = -220780596;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, object> _tables)
    {
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "Id:" + Id + ","
        + "Name:" + Name + ","
        + "GreennessRange:" + GreennessRange + ","
        + "ConversionRate:" + Bright.Common.StringUtil.CollectionToString(ConversionRate) + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}
}
