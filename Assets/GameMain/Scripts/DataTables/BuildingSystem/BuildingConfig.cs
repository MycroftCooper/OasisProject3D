//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;



namespace cfg.BuildingSystem
{ 

public sealed partial class BuildingConfig :  Bright.Config.BeanBase 
{
    public BuildingConfig(JSONNode _json) 
    {
        { if(!_json["id"].IsString) { throw new SerializationException(); }  Id = _json["id"]; }
        { if(!_json["name"].IsString) { throw new SerializationException(); }  Name = _json["name"]; }
        { if(!_json["buildingType"].IsNumber) { throw new SerializationException(); }  BuildingType = (EBuildingType)_json["buildingType"].AsInt; }
        { var __json0 = _json["canBulidBlockType"]; if(!__json0.IsArray) { throw new SerializationException(); } int _n0 = __json0.Count; CanBulidBlockType = new EBlockType[_n0]; int __index0=0; foreach(JSONNode __e0 in __json0.Children) { EBlockType __v0;  { if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = (EBlockType)__e0.AsInt; }  CanBulidBlockType[__index0++] = __v0; }   }
        { if(!_json["HP"].IsNumber) { throw new SerializationException(); }  HP = _json["HP"]; }
        { var __json0 = _json["bulidCost"]; if(!__json0.IsArray) { throw new SerializationException(); } BulidCost = new System.Collections.Generic.Dictionary<EResType, int>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { EResType _k0;  { if(!__e0[0].IsNumber) { throw new SerializationException(); }  _k0 = (EResType)__e0[0].AsInt; } int _v0;  { if(!__e0[1].IsNumber) { throw new SerializationException(); }  _v0 = __e0[1]; }  BulidCost.Add(_k0, _v0); }   }
        { var __json0 = _json["keepCost"]; if(!__json0.IsArray) { throw new SerializationException(); } KeepCost = new System.Collections.Generic.Dictionary<EResType, int>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { EResType _k0;  { if(!__e0[0].IsNumber) { throw new SerializationException(); }  _k0 = (EResType)__e0[0].AsInt; } int _v0;  { if(!__e0[1].IsNumber) { throw new SerializationException(); }  _v0 = __e0[1]; }  KeepCost.Add(_k0, _v0); }   }
        { var __json0 = _json["produce"]; if(!__json0.IsArray) { throw new SerializationException(); } Produce = new System.Collections.Generic.Dictionary<EResType, int>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { EResType _k0;  { if(!__e0[0].IsNumber) { throw new SerializationException(); }  _k0 = (EResType)__e0[0].AsInt; } int _v0;  { if(!__e0[1].IsNumber) { throw new SerializationException(); }  _v0 = __e0[1]; }  Produce.Add(_k0, _v0); }   }
        { var __json0 = _json["storage"]; if(!__json0.IsArray) { throw new SerializationException(); } Storage = new System.Collections.Generic.Dictionary<EResType, int>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { EResType _k0;  { if(!__e0[0].IsNumber) { throw new SerializationException(); }  _k0 = (EResType)__e0[0].AsInt; } int _v0;  { if(!__e0[1].IsNumber) { throw new SerializationException(); }  _v0 = __e0[1]; }  Storage.Add(_k0, _v0); }   }
        { if(!_json["describe"].IsString) { throw new SerializationException(); }  Describe = _json["describe"]; }
        PostInit();
    }

    public BuildingConfig(string id, string name, EBuildingType buildingType, EBlockType[] canBulidBlockType, float HP, System.Collections.Generic.Dictionary<EResType, int> bulidCost, System.Collections.Generic.Dictionary<EResType, int> keepCost, System.Collections.Generic.Dictionary<EResType, int> produce, System.Collections.Generic.Dictionary<EResType, int> storage, string describe ) 
    {
        this.Id = id;
        this.Name = name;
        this.BuildingType = buildingType;
        this.CanBulidBlockType = canBulidBlockType;
        this.HP = HP;
        this.BulidCost = bulidCost;
        this.KeepCost = keepCost;
        this.Produce = produce;
        this.Storage = storage;
        this.Describe = describe;
        PostInit();
    }

    public static BuildingConfig DeserializeBuildingConfig(JSONNode _json)
    {
        return new BuildingSystem.BuildingConfig(_json);
    }

    /// <summary>
    /// 建筑ID
    /// </summary>
    public string Id { get; private set; }
    /// <summary>
    /// 建筑名称
    /// </summary>
    public string Name { get; private set; }
    /// <summary>
    /// 建筑类型
    /// </summary>
    public EBuildingType BuildingType { get; private set; }
    /// <summary>
    /// 可建造地块
    /// </summary>
    public EBlockType[] CanBulidBlockType { get; private set; }
    /// <summary>
    /// 血量
    /// </summary>
    public float HP { get; private set; }
    /// <summary>
    /// 建造花销
    /// </summary>
    public System.Collections.Generic.Dictionary<EResType, int> BulidCost { get; private set; }
    /// <summary>
    /// 维护花销
    /// </summary>
    public System.Collections.Generic.Dictionary<EResType, int> KeepCost { get; private set; }
    /// <summary>
    /// 产出量
    /// </summary>
    public System.Collections.Generic.Dictionary<EResType, int> Produce { get; private set; }
    /// <summary>
    /// 存储量
    /// </summary>
    public System.Collections.Generic.Dictionary<EResType, int> Storage { get; private set; }
    /// <summary>
    /// 描述
    /// </summary>
    public string Describe { get; private set; }

    public const int __ID__ = -517423519;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, object> _tables)
    {
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "Id:" + Id + ","
        + "Name:" + Name + ","
        + "BuildingType:" + BuildingType + ","
        + "CanBulidBlockType:" + Bright.Common.StringUtil.CollectionToString(CanBulidBlockType) + ","
        + "HP:" + HP + ","
        + "BulidCost:" + Bright.Common.StringUtil.CollectionToString(BulidCost) + ","
        + "KeepCost:" + Bright.Common.StringUtil.CollectionToString(KeepCost) + ","
        + "Produce:" + Bright.Common.StringUtil.CollectionToString(Produce) + ","
        + "Storage:" + Bright.Common.StringUtil.CollectionToString(Storage) + ","
        + "Describe:" + Describe + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}
}
